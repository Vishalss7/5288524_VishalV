#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char *arr;
    int top;
    int capacity;
} Stack;

Stack* createStack(int capacity) {
    Stack *s = (Stack*)malloc(sizeof(Stack));
    s->capacity = capacity;
    s->top = -1;
    s->arr = (char*)malloc(capacity * sizeof(char));
    return s;
}

int isEmpty(Stack *s) {
    return s->top == -1;
}

void push(Stack *s, char c) {
    s->arr[++s->top] = c;
}

char pop(Stack *s) {
    return s->arr[s->top--];
}

char peek(Stack *s) {
    return s->arr[s->top];
}

int isMatchingPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '[' && close == ']') ||
           (open == '{' && close == '}');
}

const char* isBalanced(char *s) {
    int n = strlen(s);
    Stack *stack = createStack(n);
    
    for (int i = 0; i < n; i++) {
        char c = s[i];
        if (c == '(' || c == '[' || c == '{') {
            push(stack, c);
        } else {
            if (isEmpty(stack)) {
                free(stack->arr);
                free(stack);
                return "NO";
            }
            char topChar = pop(stack);
            if (!isMatchingPair(topChar, c)) {
                free(stack->arr);
                free(stack);
                return "NO";
            }
        }
    }
    
    const char* result = isEmpty(stack) ? "YES" : "NO";
    free(stack->arr);
    free(stack);
    return result;
}

int main() {
    int t;
    scanf("%d", &t);
    for (int i = 0; i < t; i++) {
        char s[1001];
        scanf("%s", s);
        printf("%s\n", isBalanced(s));
    }
    return 0;
}
